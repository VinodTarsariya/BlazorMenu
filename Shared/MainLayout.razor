@inherits LayoutComponentBase

@inject IJSRuntime  JSRuntime
@using BlazorMenu.Model
<!-- begin::Page loader -->
<!-- end::Page Loader -->
<!-- begin:: Page -->
<!-- begin:: Header Mobile -->

<div id="kt_header_mobile" class="kt-header-mobile  kt-header-mobile--fixed ">
    <div class="kt-header-mobile__logo">
        <a href="index.html">
            <img alt="Logo" src="assets/media/logos/logo-9-sm.png" />
        </a>
    </div>
    <div class="kt-header-mobile__toolbar">
        <button class="kt-header-mobile__toolbar-toggler" id="kt_header_mobile_toggler" @onclick="@(()=>OnMobileHeaderClick("kt_header_mobile_toggler"))"><span></span></button>
        <button class="kt-header-mobile__toolbar-topbar-toggler" id="kt_header_mobile_topbar_toggler">
            <i class="flaticon-more-1"></i>
        </button>       
    </div>
</div>

<!-- end:: Header Mobile -->
<div class="kt-grid kt-grid--hor kt-grid--root">
    <div class="kt-grid__item kt-grid__item--fluid kt-grid kt-grid--ver kt-page">
        <div class="kt-grid__item kt-grid__item--fluid kt-grid kt-grid--hor kt-wrapper" id="kt_wrapper">

            <!-- begin:: Header -->
            <div id="kt_header" class="kt-header  kt-header--fixed " data-ktheader-minimize="on">
                <div class="kt-container  kt-container--fluid ">

                    <!-- begin:: Brand -->
                    <div class="kt-header__brand   kt-grid__item" id="kt_header_brand" style="flex-grow:0;padding-right:20px">
                        <a class="kt-header__brand-logo" href="?page=index">
                            <img alt="Logo" src="assets/media/logos/logo-9.png" />
                        </a>
                    </div>

                    <!-- end:: Brand -->
                    <!-- begin: Header Menu -->
                    <button class="kt-header-menu-wrapper-close" id="kt_header_menu_mobile_close_btn" @onclick="@(()=>OnMobileHeaderCloseClick("kt_header_menu_mobile_close_btn"))">
                        <i class="la la-close">
                        </i>
                    </button>
                    <div class="kt-header-menu-wrapper kt-grid__item kt-grid__item--fluid" id="kt_header_menu_wrapper">
                        <div id="kt_header_menu" class="kt-header-menu kt-header-menu-mobile ">
                            <ul class="kt-menu__nav ">                                
                                @*Level 1 Start*@
                                @if (menuModel != null)
                                {
                                    foreach (var FirstLevelMenuItems in menuModel.Where(x => x.ParentId == string.Empty))
                                    {
                                        //Level 1 data
                                        <li class="kt-menu__item  kt-menu__item--submenu kt-menu__item--rel" data-ktmenu-submenu-toggle="click" aria-haspopup="true" id="@FirstLevelMenuItems.MenuId" @onclick="(()=>OnFirstLevelMenuClick(FirstLevelMenuItems.MenuId))">
                                            <a href="javascript:;" class="kt-menu__link kt-menu__toggle">
                                                <i class="kt-menu__link-icon @FirstLevelMenuItems.IconClass">
                                                </i>
                                                <span class="kt-menu__link-text">@FirstLevelMenuItems.MenuName</span>
                                                <i class="kt-menu__ver-arrow la la-angle-right">
                                                </i>
                                            </a>

                                            @*Level 2 Start*@
                                            <div class="kt-menu__submenu kt-menu__submenu--classic kt-menu__submenu--left">
                                                <ul class="kt-menu__subnav">
                                                    @foreach (var SecondLevelMenuItems in menuModel.Where(y => y.ParentId == FirstLevelMenuItems.MenuId))
                                                    {
                                                        //Level 2 data
                                                        int ThirdLevelMenuItemsCount = menuModel.Where(y => y.ParentId == SecondLevelMenuItems.MenuId).Count();
                                                        <li class=@(ThirdLevelMenuItemsCount ==0 ? "kt-menu__item" : "kt-menu__item  kt-menu__item--submenu" ) aria-haspopup="true" data-ktmenu-submenu-toggle=@(ThirdLevelMenuItemsCount ==0 ?"hover" : "" ) id="@SecondLevelMenuItems.MenuId" @onclick="(()=>OnSecondLevelMenuClick(SecondLevelMenuItems.MenuId))">

                                                            <a href=@(ThirdLevelMenuItemsCount ==0 ? "ComponentUrl" : "javascript:;" ) class=@(ThirdLevelMenuItemsCount ==0 ? "kt-menu__link" :"kt-menu__link kt-menu__toggle")>
                                                                <i class="kt-menu__link-icon @SecondLevelMenuItems.IconClass">
                                                                </i>
                                                                <span class="kt-menu__link-text">@SecondLevelMenuItems.MenuName</span>
                                                                @if (ThirdLevelMenuItemsCount > 0)
                                                                {
                                                                    <i class="kt-menu__hor-arrow la la-angle-right">
                                                                    </i>
                                                                    <i class="kt-menu__ver-arrow la la-angle-right">
                                                                    </i>
                                                                }
                                                            </a>

                                                            @*Level 3 Start*@
                                                            @if (ThirdLevelMenuItemsCount > 0)
                                                            {
                                                                <div class="kt-menu__submenu kt-menu__submenu--classic kt-menu__submenu--right">
                                                                    <ul class="kt-menu__subnav">
                                                                        @foreach (var ThirdLevelMenuItems in menuModel.Where(y => y.ParentId == SecondLevelMenuItems.MenuId))
                                                                        {
                                                                            //Level 3 data
                                                                            int FourthLevelMenuItemsCount = menuModel.Where(y => y.ParentId == ThirdLevelMenuItems.MenuId).Count();

                                                                            <li class=@(FourthLevelMenuItemsCount ==0 ? "kt-menu__item" : "kt-menu__item  kt-menu__item--submenu" ) aria-haspopup="true" data-ktmenu-submenu-toggle=@(FourthLevelMenuItemsCount ==0 ?"hover" : "" ) id="@ThirdLevelMenuItems.MenuId" @onclick="(()=>OnThirdLevelMenuClick(ThirdLevelMenuItems.MenuId))">

                                                                                <a href=@(FourthLevelMenuItemsCount ==0 ? "ComponentUrl" : "javascript:;" ) class=@(FourthLevelMenuItemsCount ==0 ? "kt-menu__link" :"kt-menu__link kt-menu__toggle")>
                                                                                    <i class="kt-menu__link-icon @ThirdLevelMenuItems.IconClass">
                                                                                    </i>
                                                                                    <span class="kt-menu__link-text">@ThirdLevelMenuItems.MenuName</span>
                                                                                    @if (FourthLevelMenuItemsCount > 0)
                                                                                    {
                                                                                        <i class="kt-menu__hor-arrow la la-angle-right">
                                                                                        </i>
                                                                                        <i class="kt-menu__ver-arrow la la-angle-right">
                                                                                        </i>
                                                                                    }
                                                                                </a>

                                                                                @*Level 4 Start*@
                                                                                @if (FourthLevelMenuItemsCount > 0)
                                                                                {
                                                                                    <div class="kt-menu__submenu kt-menu__submenu--classic kt-menu__submenu--right">
                                                                                        <ul class="kt-menu__subnav">
                                                                                            @foreach (var ForthLevelMenuItems in menuModel.Where(y => y.ParentId == ThirdLevelMenuItems.MenuId))
                                                                                            {
                                                                                                //Level 4 data
                                                                                                int FifthLevelMenuItemsCount = menuModel.Where(y => y.ParentId == ForthLevelMenuItems.MenuId).Count();

                                                                                                <li class=@(FifthLevelMenuItemsCount ==0 ? "kt-menu__item" : "kt-menu__item  kt-menu__item--submenu" ) aria-haspopup="true" data-ktmenu-submenu-toggle=@(FifthLevelMenuItemsCount ==0 ?"hover" : "" ) id="@ForthLevelMenuItems.MenuId" @onclick="(()=>OnFourthLevelMenuClick(ForthLevelMenuItems.MenuId))">
                                                                                                    <a href=@(FifthLevelMenuItemsCount ==0 ? "ComponentUrl" : "javascript:;" ) class=@(FifthLevelMenuItemsCount ==0 ? "kt-menu__link" :"kt-menu__link kt-menu__toggle")>
                                                                                                        <i class="kt-menu__link-icon @ForthLevelMenuItems.IconClass">
                                                                                                        </i>
                                                                                                        <span class="kt-menu__link-text">@ForthLevelMenuItems.MenuName</span>
                                                                                                        @if (FifthLevelMenuItemsCount > 0)
                                                                                                        {
                                                                                                            <i class="kt-menu__hor-arrow la la-angle-right">
                                                                                                            </i>
                                                                                                            <i class="kt-menu__ver-arrow la la-angle-right">
                                                                                                            </i>
                                                                                                        }
                                                                                                    </a>

                                                                                                    @*Level 5 Start*@
                                                                                                    @if (FifthLevelMenuItemsCount > 0)
                                                                                                    {
                                                                                                        <div class="kt-menu__submenu kt-menu__submenu--classic kt-menu__submenu--right">
                                                                                                            <ul class="kt-menu__subnav">
                                                                                                                @foreach (var FifthLevelMenuItems in menuModel.Where(y => y.ParentId == ForthLevelMenuItems.MenuId))
                                                                                                                {
                                                                                                                    //Level 5 data
                                                                                                                    <li class="kt-menu__item" aria-haspopup="true" id="@FifthLevelMenuItems.MenuId" @onclick="(()=>OnFifthLevelMenuClick(FifthLevelMenuItems.MenuId))">
                                                                                                                        <a href="ComponentUrl" class="kt-menu__link">
                                                                                                                            <i class="kt-menu__link-icon @FifthLevelMenuItems.IconClass">
                                                                                                                            </i>
                                                                                                                            <span class="kt-menu__link-text">@FifthLevelMenuItems.MenuName</span>
                                                                                                                        </a>

                                                                                                                    </li>
                                                                                                                }
                                                                                                            </ul>
                                                                                                        </div>
                                                                                                    }
                                                                                                    @*Level 5 End*@
                                                                                                </li>
                                                                                            }
                                                                                        </ul>
                                                                                    </div>
                                                                                }
                                                                                @*Level 4 End*@
                                                                            </li>
                                                                        }
                                                                    </ul>
                                                                </div>
                                                            }
                                                            @*Level 3 End*@
                                                        </li>
                                                    }
                                                </ul>
                                            </div>
                                            @*Level 2 End*@
                                        </li>
                                    }
                                }
                                @*Level 1 End*@

                            </ul>
                        </div>
                    </div>
                    @*<div class="kt-header-menu-wrapper-overlay" id="kt_header_menu_wrapper_overlay"></div>*@
                    <div class="" id="kt_header_menu_wrapper_overlay" @onclick="@(()=>OnMobileHeaderCloseClick("kt_header_menu_mobile_close_btn"))"></div>
                    <!-- end: Header Menu -->
                    <!-- end:: Header Topbar -->
                </div>
            </div>
            <!-- end:: Header -->
           
            <div class="kt-body kt-grid__item kt-grid__item--fluid kt-grid kt-grid--hor kt-grid--stretch" id="kt_body">
                <div class="kt-content  kt-grid__item kt-grid__item--fluid kt-grid kt-grid--hor" id="kt_content">

                    <!-- begin:: Subheader -->
                    <!-- end:: Subheader -->
                    <!-- begin:: Content -->
                    <div class="kt-container  kt-grid__item kt-grid__item--fluid">
                        @Body
                    </div>
                    <!-- end:: Content -->
                </div>
            </div>

        </div>
    </div>
</div>

@code{

    string LastFirstLevelActiveMenuId;
    string LastSecondLevelActiveMenuId;
    string LastThirdLevelActiveMenuId;
    string LastFourthLevelActiveMenuId;
    string LastFifthLevelActiveMenuId;
    string LastActiveRootMenuId;
    bool IsSecondLevelMenuItemClicked;
    bool IsThirdLevelMenuItemClicked;
    bool IsFourthLevelMenuItemClicked;
    bool IsFifthLevelMenuItemClicked;
    bool IsMobileHeaderClicked;
    List<MenuModel> menuModel;
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            menuModel = new List<MenuModel>
                ();

            menuModel.Add(new MenuModel { MenuId = "1", MenuName = "Dashboard", ParentId = "" , IconClass = "flaticon2-start-up", SerialNumber =11});
            menuModel.Add(new MenuModel { MenuId = "2", MenuName = "Default Dashboard", ParentId = "1", IconClass = "flaticon2-photograph", SerialNumber = 2 });
            menuModel.Add(new MenuModel { MenuId = "3", MenuName = "Fluid Dashboard", ParentId = "1", IconClass = "flaticon2-lorry", SerialNumber = 20});
            menuModel.Add(new MenuModel { MenuId = "4", MenuName = "Aside Dashboard", ParentId = "1", IconClass = "flaticon2-cube-1", SerialNumber = 25 });
            menuModel.Add(new MenuModel { MenuId = "5", MenuName = "Components", ParentId = "" , IconClass = "flaticon2-browser-1", SerialNumber = 5 });
            menuModel.Add(new MenuModel { MenuId = "6", MenuName = "Base", ParentId = "5", IconClass = "flaticon2-pie-chart-4", SerialNumber = 178 });
            menuModel.Add(new MenuModel { MenuId = "7", MenuName = "Custom", ParentId = "5", IconClass = "flaticon2-calendar-2", SerialNumber = 451 });
            menuModel.Add(new MenuModel { MenuId = "8", MenuName = "Extended", ParentId = "5", IconClass = "flaticon2-graph-1", SerialNumber = 512 });
            menuModel.Add(new MenuModel { MenuId = "9", MenuName = "Icon", ParentId = "5", IconClass = "flaticon2-location", SerialNumber = 1556 });
            menuModel.Add(new MenuModel { MenuId = "10", MenuName = "State Color", ParentId = "6", IconClass = "flaticon2-architecture-and-city", SerialNumber = 451 });
            menuModel.Add(new MenuModel { MenuId = "11", MenuName = "Typo Graphy", ParentId = "6", IconClass = "flaticon2-browser-2", SerialNumber = 23});
            menuModel.Add(new MenuModel { MenuId = "12", MenuName = "Badge", ParentId = "7", IconClass = "flaticon2-list-3", SerialNumber = 156 });
            menuModel.Add(new MenuModel { MenuId = "13", MenuName = "Navigation", ParentId = "7", IconClass = "flaticon2-writing", SerialNumber = 258 });
            menuModel.Add(new MenuModel { MenuId = "14", MenuName = "Sticky Panel", ParentId = "8", IconClass = "flaticon2-telegram-logo", SerialNumber = 563 });
            menuModel.Add(new MenuModel { MenuId = "15", MenuName = "Tree View", ParentId = "8", IconClass = "flaticon2-rocket", SerialNumber = 741 });
            menuModel.Add(new MenuModel { MenuId = "16", MenuName = "Flaticon", ParentId = "9", IconClass = "flaticon2-indent-dots", SerialNumber = 156 });
            menuModel.Add(new MenuModel { MenuId = "18", MenuName = "Vertical", ParentId = "13", IconClass = "flaticon2-search-1", SerialNumber = 693 });
            menuModel.Add(new MenuModel { MenuId = "17", MenuName = "Horizontal", ParentId = "13", IconClass = "flaticon2-bell-alarm-symbol", SerialNumber = 145 });
            menuModel.Add(new MenuModel { MenuId = "19", MenuName = "Full width", ParentId = "17", IconClass = "flaticon2-line-chart", SerialNumber = 561 });
            menuModel.Add(new MenuModel { MenuId = "20", MenuName = "Fluid type", ParentId = "17", IconClass = "flaticon2-box-1", SerialNumber = 123 });

            menuModel= menuModel.OrderBy(x => x.SerialNumber).ToList();

            IsSecondLevelMenuItemClicked = false;
            IsThirdLevelMenuItemClicked = false;
            IsFourthLevelMenuItemClicked = false;
            IsFifthLevelMenuItemClicked = false;
            StateHasChanged();

            //await JSRuntime.InvokeVoidAsync("StartApp");
        }
    }
    protected async Task OnFirstLevelMenuClick(string ElementId)
    {
        if (!IsSecondLevelMenuItemClicked && !IsThirdLevelMenuItemClicked && !IsFourthLevelMenuItemClicked && !IsFifthLevelMenuItemClicked)
        {
            if (string.IsNullOrEmpty(LastFirstLevelActiveMenuId))
            {
                LastFirstLevelActiveMenuId = ElementId;
            }
            await JSRuntime.InvokeVoidAsync("OnFirstLevelMenuClick", LastFirstLevelActiveMenuId, ElementId, IsMobileHeaderClicked);
            LastFirstLevelActiveMenuId = ElementId;
        }
        else
        {
            IsSecondLevelMenuItemClicked = false;
            IsThirdLevelMenuItemClicked = false;
            IsFourthLevelMenuItemClicked = false;
            IsFifthLevelMenuItemClicked = false;
        }
    }

    protected async Task OnSecondLevelMenuClick(string ElementId)
    {
        if (!IsThirdLevelMenuItemClicked && !IsFourthLevelMenuItemClicked && !IsFifthLevelMenuItemClicked)
        {
            if (string.IsNullOrEmpty(LastSecondLevelActiveMenuId))
            {
                LastSecondLevelActiveMenuId = ElementId;
            }
            IsSecondLevelMenuItemClicked = true;

            bool HasChild = menuModel.Where(x => x.ParentId == ElementId).Count() > 0 ? true : false;

            await JSRuntime.InvokeVoidAsync("OnSubMenuClick", LastSecondLevelActiveMenuId, ElementId, IsMobileHeaderClicked, HasChild);
            LastSecondLevelActiveMenuId = ElementId;

            //If current menu is last menu then make root menu of current as active menu.
            await SearchAndActivateRootMenuAsync(ElementId);

            if (IsMobileHeaderClicked && !HasChild)
            {
                await OnMobileHeaderCloseClick("kt_header_menu_mobile_close_btn");
            }

        }
    }

    protected async Task OnThirdLevelMenuClick(string ElementId)
    {
        if (!IsFourthLevelMenuItemClicked && !IsFifthLevelMenuItemClicked)
        {
            if (string.IsNullOrEmpty(LastThirdLevelActiveMenuId))
            {
                LastThirdLevelActiveMenuId = ElementId;
            }
            IsThirdLevelMenuItemClicked = true;

            bool HasChild = menuModel.Where(x => x.ParentId == ElementId).Count() > 0 ? true : false;

            await JSRuntime.InvokeVoidAsync("OnSubMenuClick", LastThirdLevelActiveMenuId, ElementId, IsMobileHeaderClicked, HasChild);
            LastThirdLevelActiveMenuId = ElementId;

            //If current menu is last menu then make root menu of current as active menu.
            await SearchAndActivateRootMenuAsync(ElementId);

            if (IsMobileHeaderClicked && !HasChild)
            {
                await OnMobileHeaderCloseClick("kt_header_menu_mobile_close_btn");
            }
        }
    }

    protected async Task OnFourthLevelMenuClick(string ElementId)
    {
        if (!IsFifthLevelMenuItemClicked)
        {
            if (string.IsNullOrEmpty(LastFourthLevelActiveMenuId))
            {
                LastFourthLevelActiveMenuId = ElementId;
            }
            IsFourthLevelMenuItemClicked = true;

            bool HasChild = menuModel.Where(x => x.ParentId == ElementId).Count() > 0 ? true : false;

            await JSRuntime.InvokeVoidAsync("OnSubMenuClick", LastFourthLevelActiveMenuId, ElementId, IsMobileHeaderClicked, HasChild);
            LastFourthLevelActiveMenuId = ElementId;

            //If current menu is last menu then make root menu of current as active menu.
            await SearchAndActivateRootMenuAsync(ElementId);

            if (IsMobileHeaderClicked && !HasChild)
            {
                await OnMobileHeaderCloseClick("kt_header_menu_mobile_close_btn");
            }
        }
    }

    protected async Task OnFifthLevelMenuClick(string ElementId)
    {
        if (string.IsNullOrEmpty(LastFifthLevelActiveMenuId))
        {
            LastFifthLevelActiveMenuId = ElementId;
        }
        IsFifthLevelMenuItemClicked = true;

        bool HasChild = menuModel.Where(x => x.ParentId == ElementId).Count() > 0 ? true : false;

        await JSRuntime.InvokeVoidAsync("OnSubMenuClick", LastFifthLevelActiveMenuId, ElementId, IsMobileHeaderClicked, HasChild);
        LastFifthLevelActiveMenuId = ElementId;

        //If current menu is last menu then make root menu of current as active menu.
        await SearchAndActivateRootMenuAsync(ElementId);

        if (IsMobileHeaderClicked && !HasChild)
        {
            await OnMobileHeaderCloseClick("kt_header_menu_mobile_close_btn");
        }

    }

    protected async Task OnMobileHeaderClick(string ElementId)
    {
        IsMobileHeaderClicked = true;
        await JSRuntime.InvokeVoidAsync("OnMobileHeaderClick", ElementId);
    }

    protected async Task OnMobileHeaderCloseClick(string ElementId)
    {
        IsMobileHeaderClicked = false;
        await JSRuntime.InvokeVoidAsync("OnMobileHeaderCloseClick", ElementId, IsMobileHeaderClicked);
    }
    protected async Task SearchAndActivateRootMenuAsync(string ElementId)
    {
        bool HasChild = menuModel.Where(x => x.ParentId == ElementId).Count() > 0 ? true : false;
        if (!HasChild)
        {
            string RootMenuId = string.Empty;
            FindRootMenuId(ElementId, ref RootMenuId);
            await JSRuntime.InvokeVoidAsync("ActivateRootMenu", LastActiveRootMenuId, RootMenuId);
            LastActiveRootMenuId = RootMenuId;
        }
    }
    protected void FindRootMenuId(string ParentMenuId, ref string RootMenuId)
    {
        MenuModel tempMenuModel = menuModel.Where(x => x.MenuId == ParentMenuId).FirstOrDefault();
        if (!string.IsNullOrEmpty(tempMenuModel.ParentId))
        {
            FindRootMenuId(tempMenuModel.ParentId, ref RootMenuId);
        }
        else
        {
            RootMenuId = tempMenuModel.MenuId;
        }
    }
}
